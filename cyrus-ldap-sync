#!/usr/bin/python

import configobj
import ldap
import cyruslib
import argparse
import os
import sys
import logging

def unbind():
    l.unbind_s()

def fatal(message):
    log.error(message)
    unbind()
    sys.exit(1)

def clean_exit(message):
    log.info(message)
    unbind()
    sys.exit(0)

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', help='Use specified config file (default: /etc/cyrus-ldap-sync.conf')
    parser.add_argument('-d', '--debug', help='Print lot\'s of messages', action='store_true')
    parser.add_argument('-n', '--dry-run', help='Simulate run, do not do anything real', action='store_true')
    parser.add_argument('-s', '--setquota', help='Set quota with SIZE for specified user', metavar='SIZE')
    parser.add_argument('-u', '--username', help='Username for quota modification')
    parser.add_argument('--showquota', help='Display current quota for user', action='store_true')
    args = parser.parse_args()

    # create logger
    global log
    log = logging.getLogger(os.path.basename(__file__))
    log.setLevel(logging.INFO)
    if args.debug == True:
        log.setLevel(logging.DEBUG)
    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(levelname)s - %(message)s")
    handler.setFormatter(formatter)
    log.addHandler(handler)

    # load config
    if not args.config:
        conffile = '/etc/cyrus-ldap-sync.conf'
    else:
        conffile = args.config
    config = configobj.ConfigObj(conffile)

    global l
    l = ldap.initialize(config['ldap_uri'])
    imap = cyruslib.CYRUS(config['imap_uri'])

    # bind to ldap server
    l.simple_bind_s(config['bind_dn'], config['bind_pass'])

    # get all CN's of users with mail atrtribute
    r = l.search_s(config['base_dn'], ldap.SCOPE_SUBTREE, '(mail=*)', ['cn'])

    # login to cyrus
    try:
        imap.login(config['cyrus_admin'], config['cyrus_pass'])
    except cyruslib.CYRUSError, e:
        fatal("{}: {}".format(e[1], e[2]))

    if args.showquota:
        if not args.username:
            fatal('--setquota requires --username')
        try:
            q = imap.lq("user." + args.username)
        except cyruslib.CYRUSError, e:
            fatal("{}: {}".format(e[1], e[2]))

        clean_exit('quota usage for %s: %d/%d' % (args.username, q[0], q[1]))

    if args.setquota:
        if not args.username:
            fatal('--setquota requires --username')
        log.info('setting new quota for user: %s', args.username)
        if not args.dry_run:
            try:
                imap.sq("user." + args.username, args.setquota)
            except cyruslib.CYRUSError, e:
                print "%s: %s" % (e[1], e[2])
        q = imap.lq("user." + args.username)
        clean_exit('new quota usage: %d/%d' % q)

    # create accounts for all users
    ulist = []
    for dn, entry in r:
        u = entry['cn'][0]
        try:
            log.debug('looking for mailbox of user: %s', u)
            m = imap.lm("user." + u)
            if len(m) == 0:
                log.info('creating mailbox user.%s', u)
                if not args.dry_run:
                    imap.cm("user." + u)
            # get/set quota
            try:
                q = imap.lq("user." + u)
            except cyruslib.CYRUSError, e:
                # if no quota, create it
                if e[0] == 45:
                    log.info('creating quota for user: %s', u)
                    if not args.dry_run:
                        imap.sq("user." + u, config['default_mailbox_quota'])
            else:
                log.debug('quota usage: %d/%d', q[0], q[1])
                if q[0] > q[1]:
                    log.warning('quota limit is reached for user: %s', u)
        except cyruslib.CYRUSError, e:
            fatal("%s: %s".format(e[1], e[2]))
        # additionally, form uid list
        ulist.append(u)

    # list all user mailboxes
    umboxlist = imap.lm('user.*')
    # look whether mbox have corresponding ldap user or not
    for mbox in umboxlist:
        if mbox.count('.') < 2:
            mbox_u = mbox.split('.')[1]
            if mbox_u not in ulist:
                try:
                    log.info('deleting mailbox of user: %s', mbox)
                    if not args.dry_run:
                        imap.dm(mbox)
                except cyruslib.CYRUSError, e:
                    fatal("%s: %s".format(e[1], e[2]))
    unbind()

if __name__ == '__main__':
    main()
